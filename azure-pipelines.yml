resources:
- repo: self
  fetchDepth: 1
queue:
  name: azu-devops-vmss
#pool:
#  vmImage: Test
trigger:
- master
variables:
  TargetFramework: 'netcoreapp3.1'
  BuildConfiguration: 'Release'
  DockerImageName: 'migration-kubernetes/clouddemo'
steps:
- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '3.1.413'
- task: CmdLine@2
  inputs:
    script: |
      echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
      yes Y | sudo apt-get install apt-transport-https ca-certificates gnupg
      curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
      sudo apt-get update && sudo apt-get install google-cloud-sdk -y
- task: CmdLine@2
  inputs:
    script: |
      sudo apt-get update
      yes Y | sudo apt-get install apt-transport-https ca-certificates curl gnupg lsb-release 
      curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
      echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
      sudo apt-get update
      sudo apt-get install docker-ce docker-ce-cli containerd.io -y
      sudo chmod 777 /var/run/docker.sock
      docker ps
- task: DotNetCoreCLI@2
  displayName: Publish
  inputs:
    projects: 'applications/clouddemo/netcore/CloudDemo.MvcCore.sln'
    publishWebProjects: false
    command: publish
    arguments: '--configuration $(BuildConfiguration) --framework=$(TargetFramework)'
    zipAfterPublish: false
    modifyOutputPath: false
- task: CmdLine@1
  displayName: 'Lock image version in deployment.yaml'
  inputs:
    filename: /bin/bash
    arguments: '-c "awk ''{gsub(\"CLOUDDEMO_IMAGE\", \"gcr.io/$(DockerImageName):$(Build.BuildId)\", $0); print}'' applications/clouddemo/netcore/deployment.yaml > $(build.artifactstagingdirectory)/deployment.yaml"'
- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact'
  inputs:
    PathtoPublish: '$(build.artifactstagingdirectory)'
- task: Docker@2
  inputs:
    containerRegistry: 'gcr-artifact-reg'
    command: 'login'
#- task: Docker@2
#  displayName: 'Build and push image'
#  inputs:
#    Dockerfile: 'applications/clouddemo/netcore/Dockerfile'
#    command: buildAndPush
#    repository: '$(DockerImageName)'

- task: Docker@2
  inputs:
    repository: 'us-docker.pkg.dev/migration-kubernetes/migration-kube'
    command: 'buildAndPush'
    Dockerfile: 'applications/clouddemo/netcore/Dockerfile'
